===========================================Chapter 1===========================================
What is Scope?

-Compiler Theory-
JS is technically a compiled language. Here is a broad, simplified version of what the JS engine is doing during compilation:
Tokenizing/lexing: A compiled language is tokenized/lexed, which breaks each string of characters into chunks called tokens. If the tokenizer invokes stateful parsing rules to check if a token should be considered distinct or part of another token, this would be called lexing.
Parsing: Takes a stream (array) of tokens and turning them into a tree of nested elements that represent the grammatical structure of the program. The tree is called an AST (Abstract Syntax Tree).
Code-Generation: This process takes the AST and turns into into executable code. This will vary greatly between language used and target platform. This step would create the actual variables in memory on the host machine, store values, run machine code, etc.
JS doesn't have plenty of time to optimize, as it is compiled right before being used, so it uses a lot of tricks (like JITs) to ensure the fastest possible performance.

-Understanding Scope-
Engine: start-to-finish compilation and execution.
Compiler: handles parsing and code generation for engine.
Scope: collects and maintains LUT for all declared identifiers and based on that enforces a set of rules of how code can be accessed.

-Back and Forth-
How the engine approaches a var declaration
1. Compiler checks if there is already a var of that name within the same scope. If so, it ignores the declaration. Otherwise, it asks Scope to declare a new var for that collection.
2. Compiler produces the code for Engine to later execute. Engine will ping Scope to see if there is a var with the same name in the Scope collection. If not, it looks elsewhere (using nested scope). It then makes an assignment if one was specified in the original code.

-Compiler Speak-
Looking up a var is an LHS (left-hand side) lookup. An RHS lookup would retrieve the source value of a given var container.
console.log(a) would be an RHS lookup, as you are looking up the value of a. a = 2 would be an LHS lookup, as you are searching for variable 'a' as a target to assign the value of 2 to.
The compiler handles function code in such a way that it both declares and defines the value in code generation, so that no assignment (or LHS lookup) is required during engine execution.

-Quiz-
function foo(a) {
	var b = a;
	return a + b;
}

var c = foo( 2 );

Identify all the LHS look-ups (there are 3!).
c = 
a = 
b = 

Identify all the RHS look-ups (there are 4!).
foo( 2 ) {
= a
return a
+ b

-Errors-
When conducting an RHS lookup, if no matching variable is found in the nested scopes, the engine will throw a ReferenceError (of type ReferenceError).
If you cannot find a matching var when using an LHS lookup while not in strict mode (which disables automatic implicit global var creation), a global variable of the same name will be created automatically by the global scope before passing it back to the JS engine.
If you find a variable using an RHS lookup, but do something with the value that is impossible such as trying to run a non-function value as a function or reference a property on a null/undefined val, the JS engine will throw a TypeError.
ReferenceError = Scope-level failure
TypeError = Scope-level success, illegal action occurred

-Review-
LHS reference: for assigning to variable
RHS reference: for retrieving variable value
When the engine first compiles a piece of code such as 'var a = 2', it first tokenizes/lexes the code into the statements 'var a', which is a scope declaration, and secondarily, 'a = 2', which is an LHS lookup of variable a (if found), followed by an assignment operation.
Reference lookups start at the currently-executed scope and work their way up the nest until they reach the global scope, either locating the reference or not.

===========================================Chapter 2===========================================
Lexical Scope

-Lex-Time-
Lexical scope is scope that is defined during lexing, which means it is based on where variables are blocks of scope are authored during writing. Scope is mostly set in stone by the time the code is being lexed.
There are ways to modify scope after lexing, but it is best practice to avoid this and stick to lex-scoping.
Function parameters are included in the nested scope contained within that function.

-Look-ups-
Shadowing is when the same identifier is specified in multiple levels of nested scope (the inner identifier shadows the outer one).
Global variables are automatically properties of the global object ('window' in browsers), so can be referenced as properties of that global object. This allows access to global properties that may otherwise be shadowed by identifiers of the same name located in deeper layers of scope.
Non-global shadowed vars cannot be accessed.
Lexical scope of functions are only defined by their location
The lexical scope lookup process is only applied to first-class identifiers like a, b, c, etc. Referencing identifiers as properties like foo.bar.baz will result in the first identifier being looked up using lexical scope, with the remaining sub-identifiers being accessed as properties using object-property access rules.

-Cheating Lexical: eval-
Cheating lexical scope is frowned upon for its use and leads to poorer performance.
The eval function takes a string argument and treats the generated code as if it had been authored at that point in the program. This allows you to modify the lexical scope environment after author-time by dynamically inserting new values.
You essentially modify a layer or multiple layers of lexical scope by calling a block/function while passing a string containing a variable declaration as an argument to be used in an eval.
In strict mode, eval only modifies the scope contained within the eval itself, and does not modify its enclosing scope.
setTimeout() and setInterval() also allow for the usage of the first argument to be a string which will then be eval'ed, which could be put towards the modification of scope, but these are deprecated behaviors.
The new Function() function takes the last argument as a string to be turned into dynamically-generated code. It's a function constructor that is somewhat safer to use than eval, but should still be avoided.
The use cases for these are very rare, as the performance degredation involved is not worth it.

-Cheating Lexical: with-
The (now-deprecated) 'with' keyword allows one to reference multiple properties of an object without repeating the object reference itself each time.
If you pass an object to a function and modify its properties (existent or not) on that passed object using 'with', that object will be treated as its own lexical scope. This does not apply to normal var declarations, which will just be scoped to the containing function.
Instead of modifying existing lexical scope at runtime as when using the eval function, the with keyword allows you to create an entirely new scope using passed objects.
When using with, if you run a lookup on an identifier in that newly-created scope does not already exist in the object used, normal lexical scope rules apply. In non-strict mode, you would travel up the layers of scope until you either found a match or you did not, resulting in the automatic creation of that identifier as a new global variable. The with keyword is outright disallowed in strict mode.

-Cheating Lexical: Performance-
The JS engine performs several performance optimizations during compilation, such as pre-determining where function and variable declarations are located. Most optimizations would be pointless and need to be disregarded by the engine if it were to come across a use of lexical perversions such as with and eval() during runtime.

-Review-
In the opinion of the author, don't use with or eval() if you want to keep your JS code optimized, as they defeat the purpose of using lexical scope to keep the act of lexing and building lookup tables out of run-time.

===========================================Chapter 3===========================================
Function vs. Block Scope

-Scope From Functions-
With function scope, it does not matter exactly where in a scope a declaration appears, only that it belongs to that function.

-Hiding In Plain Scope-
One useful way of approaching functions is to think of hiding sections of code from exposure by wrapping them in a function if they do not need to be exposed, rather than just writing functions to add code to. This arises from the software design 'Principle of Least Priviledge'. Only expose what is minimally necessary on that particular scope layer.

-Collision Avoidance-
One way to avoid collisions is to use global namespaces. Libraries often create a single variable, usually an object, in global scope. This variable/object is used as the global namespace for the respective library, exposing all library functionality as properties of that namespace.
Another option for collision avoidance is to use modules, using any of the various dependency managers. When you use these, no libraries add identifiers to the global scope. Instead, each library's identifiers are explicitly imported into another specific scope through the dependency manager's various mechanisms. 
Dependency managers do not do anything special other than enforce scoping rules to ensure that no two identifiers are injected into any shared scope, but rather kept in private, individual scopes, to prevent collisions.
According to the author, if you code defensively, you can avoid the usage of dependency managers entirely and get the same results.

-Functions As Scopes-
While you can effectively hide a snippet of code from the current scope by using a function, two downsides are that it pollutes the enclosing scope with an identifier, and you need to actually call that identifier to execute the code.
You can circumvent these two things by converting the standard function declaration into a function-expression that immediately calls itself.
If the word "function" is positioned as the very first thing in a statement, it's a declaration. Otherwise, it's an expression. 
With a function expression, the identifier is bound within its own function, rather than its enclosing scope. Otherwise, it would be a standard declaration.
This hides the function identifier within its own scope, rather than unnecessarily polluting the enclosing scope.

-Anonymous vs. Named-
Function expressions can be anonymous, but standard function declarations must be named.
While anonymous functions are often encouraged by many libraries and tools, there are drawbacks:
	1. They have no useful name to display in stack traces, making debugging more difficult.
	2. If the function needs to refer to itself for recursion/etc., the deprecated arguments.callee reference is required. You would also need a self-reference if you wanted to unbind an event handler function after it fires.
	3. A descriptive identifier name can help to self-document the code it refers to.
According to author, the best practice for inline functions or functions as callbacks is to use a name. They aren't necessary, but will help avoid the above drawbacks.

-Invoking Function Expressions Immediately-
You execute a function expression by immediately adding another ( ) pair on the end. This pattern is called an IIFE (Immediately Invoked Function Expression).
You can include the invoking ( ) pair on the inside or outside of the outer ( ) wrapping pair. It makes no difference.
You can pass arguments into the invoking parenthesis just as you would any standard function declaration.
One usage of the IIFE pattern is that you can name a parameter 'undefined' and pass no argument to it in order to protect your function from any incorrect overwriting of the default undefined variable that may have taken place outside of the function. This guarantees that undefined identifier actually resolves to the unidentified value in your block of code.
The UMD (Universal Module Definition) pattern is similar to IIFE but differs in that it is slightly more verbose but also a bit more readable. The function to execute is given after its invocation and passing of parameters. You define your function expression in the second half of the snippet (enclosed in its own ( ) pair), passing it as a parameter to the IIFE function in the first half. Within that initial function, you invoke the parameter function, passing any arguments as defined by the passed function you are referencing.

-Blocks As Scopes-
For loops, if statements, etc. scope themselves to the enclosing scope. For example, if you declare a var inside of an if statement, it still belongs to the enclosing scope of that if statement. Same for the head of a for loop. It is only stylistic, fake block-scoping, and requires self-enforcement to not accidentally use that variable in another place within that enclosing scope.
Block scoping extends the Principle of Least Exposure to hide information in blocks of code rather than only functions.

-with-
The 'with' statement is a form of block scoping, although frowned upon by many. The scope created from the with object only exists for the lifetime of the with statement.

-try/catch-
As of Javascript ES3, the variable declaration in the catch clause of a try/catch is block-scoped to the catch block.
For some reason, linters commonly complain when there is more than one catch clause in the same scope using identifiers with the same name, even though they are safely block-scoped. To avoid this, some devs will add numbers to the end of their 'err' identifier names, or disable duplicate var name checking in their linter.

-let-
The previous examples of block scoping were pretty much all JS had until ES6, which introduced the keyword 'let', which sits alongside var as another way to declare variables.
The let keyword declares a variable and (somewhat) implicitly makes it available only to the block it's contained in, usually a { } curly bracket pair.
It can help to create specific blocks for block-scoping to avoid confusion with code that could be later refactored. Explicit block-scoping in this style is preferred and fits more naturally with how block-scoping works in other languages.
Of important note, declarations made with the let keyword will not hoist into the entirety of the enclosing scope-block. They will not exist until they are declared.

-Garbage Collection-
You can explicitly block-scope memory-heavy variables using the let keyword to let the JS engine know when something can be garbage collected.

-let Loops-
You can use let in a for-loop heading when declaring your numerical loop value. It will bind the variable to the scope of that for-loop body and then re-bind it for each iteration of the loop.
Be careful when refactoring code inside of statements or blocks that contain block-scoped variables, as you have to pay extra attention to keep the variables bound to the same scope of the blocks that depend on them.

-const-
ES6 also introduced const, which creates a block-scoped variable whose value is fixed. Any attempt to change it will result in an error.

-Review-
Functions are the most common unit of scope in JS, but you can also use block-scoping to hide variables and functions within an arbitrary block.
You can hide variables from enclosing scope in blocks by using keywords such as let and const.
According to author, block scope should not entirely replace the use of vars and function scope. Use what produces better and more readable/maintanable code in the given situation.

===========================================Chapter 4===========================================
Hoisting

-The Compiler Strikes Again-
Variable and function declarations are processed during compilation phase (hoisted to the top of the code in its scope), while assignments are left in place for the execution phase. The declaration will come before the assignment. Only declarations are hoisted.
Unlike function declarations, function expressions are not hoisted. Its variable identifier will be hoisted, but you will get a TypeError if you try to call it before it is defined. Since the function identifier is not exposed to the enclosing scope, it will also remain unhoisted.

-Functions First-
Function declarations are hoisted before var declarations.
Duplicate var declarations are ignored, so if you declared both a function and var with the same identifier, the function declaration would be hoisted and the var declaration ignored. If you declared multiple vars of the same identifier name, only the first one would be hoisted, while the others would be ignored.
On the other hand, duplicate function declarations will override previous ones.
As of current versions of JS, function declarations that appear inside normal blocks will hoist to the enclosing scope, so conditional function declarations can still be overridden to result in the last declaration being hoisted, regardless of conditions.
This being said, try and avoid duplicate definitions in the same scope.

-Review-
Declarations = Compiler phase
Assignments = Execution phase

===========================================Chapter 5===========================================
Scope Closure

-Nitty Gritty-
"Closure is when a function is able to remember and access its lexical scope even when that function is executing outside its lexical scope."
Technically, a nested function closes over its enclosing scope up in layers until (and including) global scope, but this is not the entirety of what closures are referring to and usually this phenomena is just observed to be the result of lexical scoping rules.
A more complete example of closure as an observable exercise is when you take a function that contains variables used by an enclosed function that returns the enclosed function, assign it to a variable, and then call that variable outside of its declared lexical scope (the initial function). The inner and outer function will be saved in memory in order to be called by the variable the outer function was assigned to (which is the same, just with a new identifier), because both are still needed in order to call the inner function. It only exists to serve its enclosed scope. The inner function's reference to the scope of the outer function is a closure.
Closure gives functions continued access to the scope it was defined in at author-time. Closures can be observed when a function relying on an enclosing scope is passed as a value and invoked in another location. No matter how the inner function is transported outside of its lexical scope, it will maintain a scope reference to where it was originally declared, and the closure will be exercised when executed.

-Now I Can See-
Whenever functions that access their own lexical scope are passed as first-class values, you will likely see them exercise closure. This applies to anything where you pass a callback function, such as timers, event handlers, Ajax requests, cross-window messaging, web workers, and asynch/synchronous tasks.
IIFEs that take a parameter from the same scope are not a complete example of closure, as the function is not executed outside of its lexical scope and does not provide a strictly observable example of closure. They are heavily related though, as they create scope, and it's a common tool to be used to create scope to be closed over.

-Loops + Closure-
Linters often complain when you put functions inside of loops, as their developers often do not understand closures.
Since simple for loops take barely any time to run, running a setTimeout function with a delay inside the loop that iterates through and prints an index will most likely result in them all outputting once the loop terminates, returning the same result for each timeout function callback, rather than printing its own unique copy of the index. This is because each of those functions is closed over the same scope, which contains only one copy of the index at any given time. All the for loop is doing is updating the value of the lone index variable after each iteration.
In order to get separate returning values from the for loop as desired, you would need to close each iteration of the function call in its own scope. A good way to do this is to use an IIFE in order to create scope, and then pass it the index variable. This way, closures are formed for each iteration of the IIFE, which gives each timeout function its own scope iteration to access when called, each containing their own correct and unique iteration index value.

-Block Scoping Revisited-
Instead of doing all of the above for running setTimeout in a loop, you can simply assign the index to a variable using the let keyword, which automatically creates scope out of the enclosing block that can then be closed over. 
Even more simply, the let keyword has a special behavior defined when it is used in the head of for loops. This behavior causes a new index variable to be declared for each iteration of the loop, rather than updating a lone variable. It will also be initialized at each subsequent iteration containing the value from the end of the prior iteration.
