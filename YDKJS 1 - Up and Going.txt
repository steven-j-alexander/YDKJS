---CHAPTER 1---
in console.log(b), log is the function, and console is the object reference where the log() function is located
var = prompt("Prompt message") will query the user for input and save in var. shortcut over implementing html form element
= is the assignment operator
2 is a literal value expression
b is a variable expression
b * 2 is an arithmetic expression
a = b * 2 is an assignment expressions
math operators are + - * /
compound assignment operators are += -= *=/=
inc/dec operators are ++ --
object property access operator is . (like console.log())
equality operators: == (loose-equals) === (strict-equals) != (loose not-equals) !== (strict not-equals)
comparison < > <= >= (less than or greater than loose-equals)
logical && ||
values included directly in the source code are called literals, and string literals are enclosed in single or double-quotes. number and boolean literals are presented as-is
it's called coercion when you convert a number to a string to print on the screen. the same when you convert a string to a number. you coerce the string to a number. you are coercing between types
if you use a built-in function to coerce between types, it's called an explicit coercion. implicit coercion is when you don't convert between types yourself, but for example loosely equate one literal value to one of a different type
comments should explain why, not what. they can optionally explain how if that's particularly confusing.
Static typing, otherwise known as type enforcement, prevents unintended value conversions.
Weak typing, otherwise known as dynamic typing, allows a variable to hold any type of value at any time. It allows flexibility.
JavaScript uses dynammic typing, so no type enforcement.
state is tracking the changes to values as your program runs
Javascript constants are usually capitalized with underscores between words
toFixed() is a function that can be accessed as an object property on any number value variables, allowing you to format the number to a specific number of decimal places
a block is one or a series statments wrapped inside a curly-brace pair
a standalone block is actually valid JS code, but isn't commonly seen, as they are typically attached to some other control statement, such as an if conditional or a loop
unlike most other statements like console.log(amount); , a block statement does not need a semicolon to conclude it
certain values are considered "falsy" because they become false when coerced to a boolean, such as 0 and "". Any value not on the "falsy" list is automatically "truthy".
a loop includes a test condition as well as a block, typically as { .. }. each time a loop block executes, that's called in iteration
the for loop has 3 clauses, the initialization clause, the conditional test clause, and the update clause to be ran after each loop block iteration
functions can optional take arguments (aka paramaters)
scope (technically called lexical scope) is basically a collection of variables as well as the rules for how those variables are accessed by name
each function gets its own scope. only code inside that function can access its scoped variables
lexical scope rules say that code in one scope can access variables of either that scope or any scope outside of it

---CHAPTER 2---
typeof a is not getting the type of the variable, but of the value it contains. variables themselves do not have types.
typeof null erroneously returns "object", but this bug will likely never be fixed as there is too much code in existence that relies on the bug.
object properties are referred to as keys when accessed via bracket notation
arrays and functions are object subtypes, rather than proper built-in types
functions can have properties, but you will only use them in limited cases
the primitive string type has an object wrapper called String (typically called a "native") paired with it that defines built-in type methods on its prototype. when you use a primitive value as an object by referencing a property or method, JS automatically "boxes" the value to its object wrapper counterpart (hidden).
checking for true or false in comparison operations with non-boolean values utilizes implicit coercion
falsy values: "", 0, -0, NaN, null, undefined, false
truthy values: "hello", 42, true, [], [1, 2], {}, {a: 42}, function foo() { .. }
the == (loose-equality operator) checks for value equality while allowing implicit coercion to take place, and === (strict equality) checks for value equality without allowing coercion
!= and !== (non-equality operators) should not be confused with inequality
in the case of a loose-equality comparison with two loosely equal values of different types, there are two ways in which a == b could be true via coercion. you could either implicitly coerce a to the type of b, or b to the type of a. in the case of "42" == 42, "42" would become 42. the process that leads you to this will become more important in complex cases.
handy es5 language guide: http://www.ecma-international.org/ecma-262/5.1/
as a general rule, use strict equality when either value could be the true or false value, either value could be any of these (0, "" or [] -- empty array). if you can't be certain about the values, use ===. in all other cases you are safe to use ==, and likely should as it will improve code readability.
when using strict or loose comparisons, comparing two non-primitive values such as objects will only check whether the references to the values match, not the values themselves.
inequality operators are referred to as "relational comparison" in the specification
similar coercion rules (although not identical) are applied to relational/inequality operators. there are no "strict inequality" operators, so coercion will always be allowed with relational/inequality operators.
string relational comparisons are done lexicographically (alphabetically like a dictionary), but if one or both is not a string, then both values are implicitly coerced to numbers.
if different value types are coerced into numbers during a comparison and one value is not coerced into a valid number (NaN), all comparisons will resolve to a value of false, as NaN is neither greater-than nor less-than any other value.
variable and function identifiers must start with a-z, A-Z, $, or _ and can contain any of those characters plus 1-9. the same applies for property names, however, reserved words cannot be used for var names that are ok for properties.
hoisting is the behavior that takes place when you declare a variable or function inside of a scope and have it conceptually moved to the top of that scope to be available for the entirety of that scope, even to usages of that variable/function that took place before it was declared in the code.
it's not common or recommended to rely on variable hoisting as it can be confusing to look at, although it is much more common and accepted to use hoisted function declarations to make calls before they are formally declared.
if you try to set a variable that hasn't been declared, you'll either end up creating a variable in the top-level global scope or getting an error, depending on whether strict mode has been set or not, so always remember to formally declare your variables.
the ES6 let keyword allows you to declare variables to belong to the individual { blocks } they are contained in, with scoping rules roughly the same as that of functions.
